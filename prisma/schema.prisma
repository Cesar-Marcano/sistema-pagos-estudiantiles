generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int             @id @default(autoincrement())
  role             Role
  username         String
  name             String
  password         String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  deletedAt        DateTime?
  AuditLog         AuditLog[]
  Discount         Discount[]
  Grade            Grade[]
  Invoice          Invoice[]
  Parent           Parent[]
  Payment          Payment[]       @relation("AddedPayments")
  VerifiedPayments Payment[]       @relation("VerifiedPayments")
  PaymentMethod    PaymentMethod[]
  Session          Session[]
  Student          Student[]

  @@unique([username, deletedAt])
}

model Parent {
  id          Int       @id @default(autoincrement())
  fullname    String
  document    String
  phoneNumber String?
  email       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  userId      Int
  addedBy     User      @relation(fields: [userId], references: [id])
  Payment     Payment[]
  students    Student[]

  @@unique([document, deletedAt])
  @@unique([email, deletedAt])
  @@unique([phoneNumber, deletedAt])
  @@index([userId, createdAt])
}

model Grade {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  hasLevels   Boolean
  maxLevel    Int?
  fee         Decimal
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  userId      Int
  addedBy     User      @relation(fields: [userId], references: [id])
  Student     Student[]

  @@unique([name, deletedAt])
}

model Student {
  id         Int           @id @default(autoincrement())
  fullname   String
  birthday   DateTime
  gradeLevel Int?
  section    String?
  document   String?
  status     StudentStatus @default(ACTIVE)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  deletedAt  DateTime?
  userId     Int
  parentId   Int
  gradeId    Int
  Invoice    Invoice[]
  Payment    Payment[]
  grade      Grade         @relation(fields: [gradeId], references: [id])
  Parent     Parent        @relation(fields: [parentId], references: [id])
  addedBy    User          @relation(fields: [userId], references: [id])
  discounts  Discount[]    @relation("StudentDiscounts")

  @@unique([document, deletedAt])
}

model Discount {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  value        Decimal
  isPercentage Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  userId       Int
  addedBy      User      @relation(fields: [userId], references: [id])
  students     Student[] @relation("StudentDiscounts")

  @@unique([name, deletedAt])
}

model Invoice {
  id             Int           @id @default(autoincrement())
  invoiceNumber  String
  issueDate      DateTime      @default(now())
  dueDate        DateTime
  periodStart    DateTime
  periodEnd      DateTime
  originalAmount Decimal
  discountAmount Decimal       @default(0)
  totalDue       Decimal
  amountPaid     Decimal       @default(0)
  balanceDue     Decimal       @default(0)
  status         InvoiceStatus @default(PENDING)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?
  studentId      Int
  userId         Int
  student        Student       @relation(fields: [studentId], references: [id])
  addedBy        User          @relation(fields: [userId], references: [id])
  payments       Payment[]

  @@unique([invoiceNumber, deletedAt])
  @@index([studentId, issueDate])
}

model PaymentMethod {
  id                         Int       @id @default(autoincrement())
  name                       String
  description                String?
  requiresManualVerification Boolean   @default(true)
  requiresReferenceNumber    Boolean   @default(false)
  createdAt                  DateTime  @default(now())
  updatedAt                  DateTime  @updatedAt
  deletedAt                  DateTime?
  userId                     Int
  Payment                    Payment[]
  addedBy                    User      @relation(fields: [userId], references: [id])

  @@unique([name, deletedAt])
}

model Payment {
  id              Int           @id @default(autoincrement())
  amount          Decimal
  verified        Boolean       @default(false)
  verifiedAt      DateTime?
  referenceNumber String?
  denied          Boolean       @default(false)
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?
  paymentMethodId Int
  studentId       Int
  parentId        Int
  invoiceId       Int?
  verifiedById    Int?
  userId          Int
  Invoice         Invoice?      @relation(fields: [invoiceId], references: [id])
  parent          Parent        @relation(fields: [parentId], references: [id])
  method          PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  forStudent      Student       @relation(fields: [studentId], references: [id])
  addedBy         User          @relation("AddedPayments", fields: [userId], references: [id])
  verifiedBy      User?         @relation("VerifiedPayments", fields: [verifiedById], references: [id])

  @@unique([referenceNumber, deletedAt])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  entity      String
  entityId    Int
  action      String
  performedBy Int
  changes     String?
  createdAt   DateTime @default(now())
  User        User     @relation(fields: [performedBy], references: [id])
}

model Session {
  id        Int      @id @default(autoincrement())
  jti       String   @unique @default(uuid())
  createdAt DateTime @default(now())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  READONLY
  ADMIN
}

enum InvoiceStatus {
  PENDING
  PARTIAL_PAID
  PAID
  OVERDUE
  CANCELLED
}

enum StudentStatus {
  ACTIVE
  INACTIVE
  GRADUATED
  WITHDRAWN
}
